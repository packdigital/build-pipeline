name: netlify-prod-deploy
on: 
  workflow_call:
    inputs:
      branch:
        description: 'Branch name'
        required: false
        type: string
      locked:
        description: 'Deploy production locked'
        required: false
        type: boolean
    secrets:
      NETLIFY_SITE_ID:
        description: "NETLIFY_SITE_ID"
        required: true
      NETLIFY_AUTH_TOKEN:
        description: "NETLIFY_AUTH_TOKEN"
        required: true
      NPM_AUTH_TOKEN:
        description: "NPM_AUTH_TOKEN"
        required: true
      BACKPACK_API_SECRET_TOKEN:
        description: "BACKPACK_API_SECRET_TOKEN"
        required: true
      BACKPACK_SITE_ID:
        description: "BACKPACK_SITE_ID"
        required: true
      CMS_CONTENT_TOKEN:
        description: "CMS_CONTENT_TOKEN"
        required: true
      CMS_MANAGEMENT_TOKEN:
        description: "CMS_MANAGEMENT_TOKEN"
        required: true
      SHOPIFY_DOMAIN:
        description: "SHOPIFY_DOMAIN"
        required: true
      SHOPIFY_ADMIN_API_TOKEN:
        description: "SHOPIFY_ADMIN_API_TOKEN"
        required: true
      SHOPIFY_STOREFRONT_API_TOKEN:
        description: "SHOPIFY_STOREFRONT_API_TOKEN"
        required: true
      SITE_URL:
        description: "SITE_URL"
        required: true
      PACK_API_URL:
        description: "Direct staging deploys to call staging"
        required: false
jobs:
  publish:
#    runs-on: self-hosted
    runs-on: ubuntu-latest
    env:
      NETLIFY_AUTH_TOKEN: ${{secrets.NETLIFY_AUTH_TOKEN}}
    steps:
    - if: env.NETLIFY_AUTH_TOKEN != null
      name: Checkout code
      uses: actions/checkout@v3
    - if: env.NETLIFY_AUTH_TOKEN != null
      name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        cache: 'yarn'
    - if: env.NETLIFY_AUTH_TOKEN != null
      name: Create and populate .npmrc file
      run: |
          touch .npmrc
          echo //registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN >> .npmrc
      shell: bash
    - if: env.NETLIFY_AUTH_TOKEN != null
      name: yarn install      
      run: yarn install
    - if: env.NETLIFY_AUTH_TOKEN != null
      name: Netlify Deploy
      run: |
        [[ ! -z "$PACK_API_URL_CD" ]] && export PACK_API_URL=$PACK_API_URL_CD
        
        MESSAGE="Run id: ${{ github.run_id }}"

        if [[ ! -z "${{ inputs.branch }}" ]]
        then
          MESSAGE="$MESSAGE | Branch: ${{ inputs.branch }}"
          
          [[ ! -z "${{ github.event.head_commit.message }}" ]] && MESSAGE="$MESSAGE | ${{ github.event.head_commit.message }}"
          
          netlify deploy --build --alias ${{inputs.branch}} --message "$MESSAGE"
        else
          [[ ! -z "${{ github.event.head_commit.message }}" ]] && MESSAGE="$MESSAGE | ${{ github.event.head_commit.message }}" || MESSAGE="$MESSAGE | Deploy to production"

          netlify deploy --build --prod-if-unlocked --message "$MESSAGE"
        fi
      env:
        NETLIFY_AUTH_TOKEN: ${{secrets.NETLIFY_AUTH_TOKEN}}
        NETLIFY_SITE_ID: ${{secrets.NETLIFY_SITE_ID}}
        BACKPACK_API_SECRET_TOKEN: ${{secrets.BACKPACK_API_SECRET_TOKEN}}
        BACKPACK_SITE_ID: ${{secrets.BACKPACK_SITE_ID}}
        CMS_CONTENT_TOKEN: ${{secrets.CMS_CONTENT_TOKEN}}
        CMS_MANAGEMENT_TOKEN: ${{secrets.CMS_MANAGEMENT_TOKEN}}
        SHOPIFY_DOMAIN: ${{secrets.SHOPIFY_DOMAIN}}
        SHOPIFY_ADMIN_API_TOKEN: ${{secrets.SHOPIFY_ADMIN_API_TOKEN}}
        SHOPIFY_STOREFRONT_API_TOKEN: ${{secrets.SHOPIFY_STOREFRONT_API_TOKEN}}
        SITE_URL: ${{secrets.SITE_URL}}
        PACK_API_URL_CD: ${{secrets.PACK_API_URL}}

  
